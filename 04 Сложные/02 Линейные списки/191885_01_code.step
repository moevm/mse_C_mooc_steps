{"block": {"name": "code", "text": "\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 <span>\u0438\u0437 \u043d\u0430\u0447\u0430\u043b\u0430: </span><code class=\"cpp\">void deleteFromBegin(Elem **head)</code><span> </span><span>\u0438\u0437 \u043a\u043e\u043d\u0446\u0430: </span><code class=\"cpp\">void deleteFromEnd(Elem **head)</code><span> \u0441\u043f\u0438\u0441\u043a\u0430. </span><span>\ufeff</span><span>\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0433\u043e\u043b\u043e\u0432\u0443(\u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442) \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0422\u0430\u043a \u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e </span><code class=\"cpp\">void deleteByValue(Elem **head, int value_for_remove)</code><span>\u0442.\u0435. \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c, \u0442\u043e \u0435\u0433\u043e \u043d\u0430\u0434\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0442\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0430\u0434\u043e \u0432\u0441\u0435.\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0443\u0437\u043b\u0430 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0438 \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u0448\u0430\u0433\u0435.</span>", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "void deleteByValue(Elem **head, int value){\n    //put your code\n}\nvoid deleteFromBegin(Elem **head){\n    //put your code\n}\nvoid deleteFromEnd(Elem **head){\n    //put your code\n}"}, "code_templates_options": {}, "samples": [], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 0, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct ElementOfLinearList\n{\n\tint value;\n\tstruct ElementOfLinearList *next;\n}Elem;\n\nElem *init(int value);\nint count(Elem *head);\nvoid printList(Elem *head);\nvoid clear(Elem **head);\nvoid addToEnd(Elem **head, int value);\nvoid addToBegin(Elem **head, int value);\nvoid fillList(Elem **head, int *arr, int size);\n\n::code\nvoid deleteByValue(Elem **head, int value){\n    //put your code\n}\nvoid deleteFromBegin(Elem **head){\n    //put your code\n}\nvoid deleteFromEnd(Elem **head){\n    //put your code\n}\n\n::footer\nint main(int argc, char const *argv[])\n{\n\tElem *head = init(0);\n    addToEnd(&head, 1);\n    addToEnd(&head, 2);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    deleteFromBegin(&head);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    deleteFromEnd(&head);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    deleteFromEnd(&head);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    head = init(3);\n    deleteFromBegin(&head);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    head = init(5);\n    int arr[] = {5, 6, 5, 6, 5, 6};\n    fillList(&head, arr, 6);\n    deleteByValue(&head, 5);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n\tdeleteByValue(&head, 6);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n\treturn 0;\n}\n\nElem *init(int value){\n\tElem *head = (Elem *)malloc(sizeof(Elem));\n\thead->value = value;\n\thead->next = NULL;\n\treturn head;\n}\n\nvoid fillList(Elem **head, int *arr, int size){\n\tfor(int i=0; i < size; i++)\n\t\taddToBegin(head, arr[i]);\n}\n\nvoid clear(Elem **head) {\n\tElem *next;\n\twhile(*head){\n\t\tnext = (*head)->next;\n\t\tfree(*head);\n\t\t(*head) = next;\n\t}\n\t*head = NULL;\n}\n\nvoid printList(Elem *head) {\n\tElem *tmp = head;\n\twhile(tmp){\n\t\tif (tmp->next)\n\t\t\tprintf(\"%d \", tmp->value);\n\t\telse\n\t\t\tprintf(\"%d\", tmp->value);\n\t\ttmp = tmp->next;\n\t}\n\tprintf(\"\\n\");\n}\n\nint count(Elem *head) {\n\tint counter = 0;\n\tElem *tmp = head;\n\twhile(tmp){\n\t\tcounter++;\n\t\ttmp = tmp->next;\n\t}\n\treturn counter;\n}\n\nvoid addToEnd(Elem **head, int value){\n\tif(*head) {\n\t\tElem *tmp = *head;\n\t\twhile(tmp->next)\n\t\t\ttmp = tmp->next;\n\t\ttmp->next = init(value);\n\t\treturn;\n\t}\n\t*head = init(value);\n}\n\nvoid addToBegin(Elem **head, int value){\n\tElem *tmp = init(value);\n\tif (*head) {\n\t\ttmp->next = *head;\n\t\t*head = tmp;\n\t}\n\telse{\n\t\t*head = tmp;\n\t}\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["", "0 1 2\n3\n1 2\n2\n1\n1\n\n0\n\n0\n6 6 6\n3\n\n0\n"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/543656/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543656", "time": "2018-12-19T13:36:18.121534"}