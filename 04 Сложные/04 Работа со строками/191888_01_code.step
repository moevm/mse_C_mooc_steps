{"block": {"name": "code", "text": "\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0443\u044e, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0441\u043e\u0431\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432, \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c(\u0440\u0435\u0433\u0438\u0441\u0442\u0440 \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442). \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0442\u044c\u0441\u044f \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b, \u043f\u0440\u043e\u0431\u0435\u043b\u044b, \u0437\u0430\u043f\u044f\u0442\u044b\u0435, \u0442\u043e\u0447\u043a\u0438, \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u044f, \u0442\u0438\u0440\u0435, \u0437\u043d\u0430\u043a\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u0430, \u0432\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u043a\u0438. \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c - \u0432\u0435\u0440\u043d\u0443\u0442\u044c 1, \u0438\u043d\u0430\u0447\u0435 - 0. \u041d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0434\u043e", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "int is_palindrome_line(char *str) {\n\t// put your code\n}"}, "code_templates_options": {}, "samples": [["Mr. Owl Ate My Metal Worm\n", "1"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import choice, choices, randint\nfrom string import ascii_letters\n\ndef generate():\n    cases = []\n    for _ in range(3):\n        str_ = ''.join(choices(ascii_letters+' ,:.?!', k=randint(1,20)))\n        cases.append(str_ + ''.join(reversed(str_))+'\\n')\n    for _ in range(3):\n        str_ = ''.join(choices(ascii_letters+' ,:.?!', k=randint(1,20)))\n        cases.append(str_ + choice(ascii_letters) +''.join(reversed(str_))+'\\n')\n    for _ in range(3):\n        cases.append(''.join(choices(ascii_letters+' ,:.?!', k=randint(1,40)))+'\\n')\n    str_ = ''.join(choices(ascii_letters+' ,:.?!', k=randint(1,20)))\n    rstr_ = ''.join(reversed(str_))\n    symb = [choice(ascii_letters), choice(ascii_letters)]\n    while symb[0] == symb[1]:\n        symb[1] = choice(ascii_letters)\n    cases.append(str_+symb[0]+symb[1]+rstr_+'\\n')\n    cases.append(symb[0]+str_+symb[1]+rstr_+'\\n')\n    cases.append(str_+symb[0]+rstr_+symb[1]+'\\n')\n    cases.append(symb[0]+str_+rstr_+symb[1]+'\\n')\n    return cases\n\ndef check(reply, clue):\n    return int(reply.strip()) == int(clue.strip())\n\ndef solve(dataset):\n    table = str.maketrans(dict.fromkeys(' -.,!?:'))\n    dataset = dataset.strip().translate(table).lower()\n    return '1' if dataset == ''.join(reversed(dataset)) else '0'", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n::code\nint is_palindrome_line(char *str) {\n\t// put your code\n}\n::footer\nint main() {\n\tchar *str = (char *)malloc(70 * sizeof(char));\n\tfgets(str, 70, stdin);\n\tstr[strlen(str) - 1] = '\\0';\n    printf(\"%d\\n\", is_palindrome_line(str));\n\tfree(str);\n\treturn 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["Mr. Owl Ate My Metal Worm\n", "1\n"], ["Never Odd Or Even\n", "1\n"], ["Doc, Note: I Dissent. A Fast Never Prevents A Fatness. I Diet On Cod.\n", "1\n"], ["A Man, A Plan, A Canal-Panama!\n", "1\n"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/543673/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543673", "time": "2018-12-19T13:36:21.012669"}