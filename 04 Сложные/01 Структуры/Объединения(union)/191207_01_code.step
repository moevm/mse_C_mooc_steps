{"block": {"name": "code", "text": "\n\n<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0437\u043d\u0430\u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0437\u0430\u0442\u0435\u043c \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u0434\u0432\u0443\u0445 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0435\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438(\u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043d\u0438\u043c\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 i). \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439. \u0427\u0438\u0441\u043b\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u043e \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439</p><p>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f:</p><ul><li>\u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \"+\"</li><li>\u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435 \"-\"</li><li>\u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \"*\"</li><li>\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \"/\"</li><li>\u043c\u043e\u0434\u0443\u043b\u044c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \"|\"</li><li>\u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e-\u0441\u043e\u043f\u0440\u044f\u0436\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \"~\"</li></ul>\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\ntypedef struct ComplexNumber{\n    float real;\n    float imaginary;\n}ComplexNumber;\n\nint main(){\n\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["~\n1.11 2.14", "1.11-2.14i"], ["|\n-6.22 -5.42", "8.25"], ["+\n6.91 7.51\n-6.82 7.49", "0.09+15.00i"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import uniform\nfrom math import fabs\n\nmin_v = -10.0\nmax_v = 10\n\n\nclass ComNum:\n    def __init__(self, real, imaginary):\n        self.real = float(real)\n        self.imaginary = float(imaginary)\n\n    def add(self, other):\n        self.real += other.real\n        self.imaginary += other.imaginary\n\n    def sub(self, other):\n        self.real -= other.real\n        self.imaginary -= other.imaginary\n\n    def mul(self, other):\n        real = self.real*other.real - self.imaginary*other.imaginary\n        imaginary = self.real*other.imaginary + self.imaginary*other.real\n        self.real = real\n        self.imaginary = imaginary\n\n    def div(self, other):\n        mod = other.modulo()**2\n        real = (self.real*other.real + self.imaginary*other.imaginary) / mod\n        imaginary = (self.imaginary*other.real - self.real*other.imaginary) / mod\n        self.real = real\n        self.imaginary = imaginary\n\n    def modulo(self):\n        return (self.real**2 + self.imaginary**2)**0.5\n\n    def conjugate(self):\n        self.imaginary *= -1\n        if self.imaginary == -0.0:\n            self.imaginary = 0.0\n\n    def __str__(self):\n        return '{:2.2f} {:2.2f}'.format(self.real, self.imaginary)\n\n\ndef generate():\n    tests = []\n\n    cn = ComNum(uniform(min_v, max_v), uniform(0.01, max_v))\n    tests.append('~\\n'+str(cn))\n    cn = ComNum(uniform(min_v, max_v), uniform(min_v, -0.01))\n    tests.append('~\\n'+str(cn))\n    cn = ComNum(uniform(min_v, max_v), 0.0)\n    tests.append('~\\n'+str(cn))\n\n    cn = ComNum(uniform(min_v, max_v), uniform(min_v, max_v))\n    tests.append('|\\n'+str(cn))\n    cn = ComNum(0.00, uniform(min_v, max_v))\n    tests.append('|\\n'+str(cn))\n    cn = ComNum(0.00, 0.00)\n    tests.append('|\\n'+str(cn))\n\n    operations = '+-*/'\n    for operation in operations:\n        for j in range(3):\n            cn1 = ComNum(uniform(min_v, max_v), uniform(min_v, max_v))\n            cn2 = ComNum(uniform(min_v, max_v), uniform(min_v, max_v))\n            tests.append(operation+'\\n'+str(cn1)+'\\n'+str(cn2))\n    return tests\n\n\ndef solve(dataset1):\n    dataset = dataset1.splitlines()\n    operation = dataset[0]\n    cn1 = dataset[1].split()\n    cn1 = ComNum(cn1[0], cn1[1])\n    if operation == '~':\n        cn1.conjugate()\n    elif operation == '|':\n        return '{:.2f}'.format(round(cn1.modulo(), 2))\n    else:\n        cn2 = dataset[2].split()\n        cn2 = ComNum(cn2[0], cn2[1])\n        if operation == '+':\n            cn1.add(cn2)\n        elif operation == '-':\n            cn1.sub(cn2)\n        elif operation == '*':\n            cn1.mul(cn2)\n        elif operation == '/':\n            cn1.div(cn2)\n        else:\n            raise Exception(\"Another operator\")\n    res_str = None\n    cn1.real = round(cn1.real, 2)\n    cn1.imaginary = round(cn1.imaginary, 2)\n    if cn1.imaginary >= 0.0:\n        cn1.imaginary = fabs(cn1.imaginary)\n        res_str = '{:.2f}+{:.2f}i'.format(cn1.real, cn1.imaginary)\n    else:\n        res_str = '{:.2f}{:.2f}i'.format(cn1.real, cn1.imaginary)\n    # print(res_str)\n    return res_str\n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 3, "templates_data": "::c\n\n#include <stdio.h>\n\ntypedef struct ComplexNumber{\n    float real;\n    float imaginary;\n}ComplexNumber;\n\nint main(){\n\n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["~\n1.11 2.14", "1.11-2.14i"], ["|\n-6.22 -5.42", "8.25"], ["+\n6.91 7.51\n-6.82 7.49", "0.09+15.00i"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/541534/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "541534", "time": "2018-12-19T13:36:16.921821"}