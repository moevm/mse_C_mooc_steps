{"block": {"name": "code", "text": "Write a program that converts a positive number from its original base <i><span class=\"wysiwyg-color-red\">(2 - 16)</span></i> to a different base <i><span class=\"wysiwyg-color-red\">(2 - 16)</span></i>.<div>The program takes in a <b>string</b> containing three numbers separated by <b>spaces</b> \" \". The first number will be the number to be converted, the second number will be the current base of the number and the last number will be the new base to be converted to. </div><div>For example:</div><div><pre><code>\"number currentBase newBase\" </code></pre><b>Note: </b>Input should be of type <b>string </b>and output should be of type <b>string</b></div>", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["46 10 16", "2E"], ["41 10 2", "101001"], ["2A 11 4", "200"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\nimport random\n\n\n\ndef val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\n\ndef toDeci(oldBase, conv_num):\n    num_len = len(conv_num)\n    power = 1  # Initialize power of base\n    num = 0  # Initialize result\n\n    for i in range(num_len - 1, -1, -1):\n\n        # A digit in input number must\n        # be less than number's base\n        num += val(conv_num[i]) * power\n        power = power * oldBase\n    return int(num)\n\n\ndef fromDeci(conv_num, newBase):\n    digits = \"0 1 2 3 4 5 6 7 8 9 A B C D E F\"\n    base_digits = digits.split()\n    a = []\n    base10 = []\n    while 0 != conv_num:\n        a.insert(0, conv_num % newBase)\n        conv_num = int(conv_num / newBase)\n    for i in a:\n        base10.append(base_digits[int(i)])\n    return ''.join(base10)\n\n\ndef converter(conv_num, oldBase, newBase):\n    return fromDeci(toDeci(oldBase, conv_num), newBase)\n\n\n\ndef generate():\n    test_cases = []\n    for i in range(10):\n        a = random.randrange(1, 100)\n        b = random.randrange(2, 16)\n        c = random.randrange(2, 16)\n        a = str(fromDeci(a, b))\n        test_cases.append(\"{} {} {}\".format(a, b, c))\n    return test_cases\n\ndef solve(dataset):\n    a, b, c = dataset.split()\n    return converter(str(a), int(b), int(c))\n  \n\n\ndef check(reply, clue):\n    return str(reply) == str(clue)\n\n", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 3, "templates_data": "::c\n\n#include <stdio.h>\n\nint main(){\n\n    return 0;\n}\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["46 10 16", "2E"], ["41 10 2", "101001"]], "are_all_tests_scored": false}, "subtitles": {}, "tests_archive": "/api/step-sources/548689/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "548689", "time": "2018-12-19T13:36:25.756458"}