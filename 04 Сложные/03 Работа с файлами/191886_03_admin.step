{"block": {"name": "admin", "text": "\n\n<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0441\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b \n\nencoded.txt. \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0441\u043a\u043e\u0440\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0432\u0438\u0434\u0430 \"a3b4c2e10b1\" \u0432 \u0432\u0438\u0434 \"aaabbbbcceeeeeeeeeeb\". \u0421\u0442\u0440\u043e\u043a\u0430 - \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0434\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0431\u0443\u043a\u0432 \u0438 \u0447\u0438\u0441\u0435\u043b, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 - \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0443\u043a\u0432 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0439 \u0431\u0443\u043a\u0432\u044b. \u0420\u0430\u0441\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0444\u0430\u0439\u043b decoded.txt. \n\n\u0424\u0430\u0439\u043b \u0441 \u043a\u043e\u0434\u043e\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f: action.c</p><p>\n\n\u041f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435/\u0437\u0430\u043f\u0438\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \"home/box/filename\"\n</p>\n\n", "video": null, "animation": null, "options": {"time_limit": 3600}, "subtitle_files": [], "source": {"image_id": 3, "memory": 64, "is_bootstrap": false, "bootstrap_script": "# Use this script to configure a virtual machine for this challenge.\n# It is run for every machine created prior to assigning it to a user.\n# A machine is considered as configured and can be assigned to a user\n# only if this script exits with a zero status.\n# The execution time is limited to 3 minutes.\nset -e  # Exit immediately if any command exits with a non-zero status.\n\n# Type your Bash commands here...\n# ...", "test_scenario": "from string import ascii_lowercase\nfrom random import randint, choice\nfrom re import sub\ntest_case = ''.join([choice(ascii_lowercase) + str(randint(1,10)) for _ in range(randint(30,50))])\n\ndef solve(code):\n    code = code.strip()\n    res = ''\n    letter = code[0]\n    count = ''\n    for i in range(1,len(code)):\n        if code[i].isdigit():\n            count += code[i]\n        else:\n            res += letter*int(count)\n            count = ''\n            letter = code[i]\n    return res + letter*int(count)\n\n\ndef test_connection(s):\n    assert s.run('true').succeeded, \"Could not connect to server\"\n\ndef test_c_file_exist(s):\n    assert s.run('test -f /home/box/action.c').succeeded, \"Could not find c file\"\n    \ndef test_compile_success(s):\n    s.run('gcc -std=c99 /home/box/action.c -o /home/box/task_exec')\n    assert s.run('test -f /home/box/task_exec').succeeded, 'Could not find executable file.\\nTry compiling it yourself.'\n    \ndef test_run_success(s):\n    s.run('echo \"{}\" > /home/box/encoded.txt'.format(test_case))\n    assert s.run('/home/box/task_exec').succeeded, 'Exec file wasn\\'t run'\n    \ndef test_result_file_exist(s):\n    assert s.run('test -f /home/box/decoded.txt').succeeded, \"Could not find result file\"\n\ndef test_file_content(s):\n    file_content = sub('\\r', '', s.run('cat /home/box/decoded.txt').strip())\n    res = solve(test_case)\n    assert res == file_content, \"Incorrect reverse\""}, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "551312", "time": "2018-12-19T13:36:19.433744"}