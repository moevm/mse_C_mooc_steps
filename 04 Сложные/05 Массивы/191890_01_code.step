{"block": {"name": "code", "text": "\n\n<b></b>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0430\u0435\u0442 \u0434\u0432\u0430 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0430. \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f 3 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 - \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u0443\u0445 \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0430\u0435\u043c\u044b\u0445 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u043e\u0432, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0438 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u044d\u0442\u0438\u0445 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u043e\u0432 \n\n(\u043e\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u043a \u043c\u043b\u0430\u0434\u0448\u0435\u0439).<div><div><p>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0430.</p><p>\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:</p><p>\n\n</p><pre>1 1 - \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u043e\u0432\n1 1 = x + 1\n1 -1 = x + -1</pre></div></div>\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["1 1\n1 1\n1 -1\n", "1 0 -1"], ["2 3\n3 2 -1\n1 0 2 3\n", "3 2 5 13 4 -3"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randrange\nfrom numpy.random import randint\n\ndef generate():\n    test_num = 20\n    value_scatter = 10\n    len_scatter = 10\n    tests = []\n    for test in range(test_num):\n        len1, len2 = randrange(len_scatter), randrange(len_scatter)\n        arr1 = ' '.join(map(str, randint(-value_scatter, value_scatter, len1+1)))\n        arr2 = ' '.join(map(str, randint(-value_scatter, value_scatter, len2+1)))\n        test_case = '{} {}\\n{}\\n{}\\n'.format(len1, len2, arr1, arr2)\n        tests.append(test_case)\n    return tests\n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n\ndef solve(dataset):\n    values = dataset.splitlines()\n    first = [int(i) for i in values[1].split()]\n    second = [int(i) for i in values[2].split()]\n    first.reverse()\n    second.reverse()\n    res = [0] * (len(first) + len(second) - 1)\n    for i in range(len(first)):\n        for j in range(len(second)):\n            res[i+j] += first[i]*second[j]\n    res.reverse()\n    res = map(str, res)\n    return ' '.join(res)\n", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 2, "templates_data": "::c\n#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}\n\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["1 1\n1 1\n1 -1\n", "1 0 -1\n"], ["2 3\n3 2 -1\n1 0 2 3\n", "3 2 5 13 4 -3\n"], ["2 1\n1 1\n3", "3 3\n"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/543682/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543682", "time": "2018-12-19T13:36:21.948507"}