{"block": {"name": "code", "text": "\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <i>modify_list(l)</i>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0438\u0437 \u043d\u0435\u0433\u043e \u0432\u0441\u0435 \u043d\u0435\u0447\u0451\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0430 \u0447\u0451\u0442\u043d\u044b\u0435 \u043d\u0430\u0446\u0435\u043b\u043e \u0434\u0435\u043b\u0438\u0442 \u043d\u0430 \u0434\u0432\u0430. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0438\u0447\u0435\u0433\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "char modify_list(char l){\n    // put your code\n}"}, "code_templates_options": {}, "samples": [["-8 1 8 7 -7 -6 -14 6 11 16 19 4\n", "-4 4 -3 -7 3 8 2"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import choices, randint\nfrom string import digits\n\n\ndef generate():\n    test_cases = []\n    for i in range(20):\n        lst = [randint(-20, 20) for i in range(randint(1,15))]\n        test_cases.append(' '.join(map(str,lst))+'\\n')\n    return test_cases\n\ndef modify_list(l):\n    i = len(l)-1\n    l = list(map(int,l))\n    while i!=-1:\n        if l[i]%2:\n            del l[i]\n        else:\n            l[i]=l[i]//2\n        i -=1\n    return list(map(str, l))\n\ndef solve(dataset):\n    dataset = modify_list(dataset.strip().split())\n    return ' '.join(dataset)   \n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <string.h>\n::code\nchar modify_list(char l){\n    // put your code\n}\n\n::footer \nint main(){\n\tint i;\n    char l[100];\n    fgets (l, 100, stdin);\n    printf(\"%s\\n\", modify_list(l));\n    return 0;\n}\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [], "are_all_tests_scored": false}, "subtitles": {}, "tests_archive": "/api/step-sources/556653/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "556653", "time": "2018-12-19T13:35:25.018872"}