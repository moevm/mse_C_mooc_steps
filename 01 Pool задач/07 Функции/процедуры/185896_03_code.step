{"block": {"name": "code", "text": "\n\n<p>\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438.<br>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0441 \u0438\u043c\u0435\u043d\u0435\u043c <i>sequence_multipliers</i>, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0443\u044e \u043e\u0434\u0438\u043d \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <b>x</b>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c <b>x</b> \u0432 \u0432\u0438\u0434\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <b>120=4\u22c55\u22c56</b></p><p><b>\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:</b><br>\u041e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e <b>N,(N&lt;1000000)</b>.</p><p><b>\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: </b><br><b>k</b> - \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u0440\u0451\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0442\u0430\u043a\u043e\u0435, \u0447\u0442\u043e <b>k(k+1)(k+2)=x</b>, \u043b\u0438\u0431\u043e <span class=\"wysiwyg-color-red\"><b>-1</b></span>, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e <b>x</b> \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0442\u0430\u043a\u043e\u043c \u0432\u0438\u0434\u0435.</p>\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include<stdio.h>\nint sequence_multipliers(int k){\n    //\u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044c \u0442\u0435\u043b\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 sequence_multipliers\n}\nint main(void){\n    //\u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e sequence_multipliers\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["120", "4"], ["13", "-1"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\n\nmax_modulo = 1000000\n\ndef generate():\n    tests = []\n    for i in range(50):\n        vals = '{}\\n'.format(str(randint(0, max_modulo)))\n        tests.append(vals)\n    return tests\n\n\ndef solve(dataset):\n    dataset = dataset.strip().split()\n    i = 0\n    n = int(dataset[0])\n    for i in range(n):\n        if(i * (i + 1) * (i + 2) == n):\n            return(str(i))\n            break\n    else:\n        return(str('-1'))\n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 2, "templates_data": "::c\n#include<stdio.h>\nint sequence_multipliers(int k){\n    //\u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044c \u0442\u0435\u043b\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 sequence_multipliers\n}\nint main(void){\n    //\u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e sequence_multipliers\n    return 0;\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["120", "4"], ["13", "-1"], ["6", "1"], ["60", "3"], ["504", "7"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/558340/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "558340", "time": "2018-12-19T13:35:25.797016"}