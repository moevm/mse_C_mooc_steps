{"block": {"name": "code", "text": "(\u041b\u0435\u0433\u043a\u0438\u0439) \u041e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043b\u0438\u0442\u043e\u043a \u0448\u043e\u043a\u043e\u043b\u0430\u0434\u0430, \u043a\u043e\u0444\u0435 \u0438 \u043f\u0430\u043a\u0435\u0442\u044b \u043c\u043e\u043b\u043e\u043a\u0430. \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 - \u0438\u0445 \u0446\u0435\u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\u00a0\n\n<i>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e \u0434\u0432\u0443\u0445 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439 (\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c)</i>", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["2 1 3\n79.56 170.79 70.77", "542.22"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\nfrom random import uniform\n\nmax_rad=20\nmax_sum=500\n\ndef generate():\n    tests = []\n    for j in range(10):\n        cn1 = '{} {} {}\\n'.format(randint(1, max_rad), randint(1, max_rad), randint(1, max_rad))\n        cn2 = '{} {} {}\\n'.format('{:.2f}'.format(uniform(1, max_sum)), '{:.2f}'.format(uniform(1, max_sum)), '{:.2f}'.format(uniform(1, max_sum)))\n        tests.append(str(cn1)+str(cn2))\n    return tests\n\ndef solve(dataset):\n    dataset = dataset.strip().split()\n    a = int(dataset[0])\n    b = int(dataset[1])\n    c = int(dataset[2])\n    d = float(dataset[3])\n    e = float(dataset[4])\n    f = float(dataset[5])\n    res = '{:.2f}'.format(a*d + b*e + c*f) \n    return(str(res))   \n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["2 1 3\n79.56 170.79 70.77", "542.22"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/556645/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "556645", "time": "2018-12-19T13:35:18.423249"}