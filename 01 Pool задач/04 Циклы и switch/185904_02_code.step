{"block": {"name": "code", "text": "<p>(\u041b\u0435\u0433\u043a\u0438\u0439) \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440 \u0434\u043b\u044f \u0447\u0435\u0442\u044b\u0440\u0451\u0445 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0421\u0438\u043c\u0432\u043e\u043b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f c \u0438 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a, b(\u0435\u0441\u043b\u0438 b=0, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \"\u041d\u0430 \u043d\u043e\u043b\u044c \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f!\").\n\n\n<i>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e \u0434\u0432\u0443\u0445 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\n\n</i>\n<br></p>", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["/ 5 0", "\u041d\u0430 \u043d\u043e\u043b\u044c \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f!"], ["+ 39 -33\n", "6.00"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\n\nmax_modulo = 100\n\ndef generate():\n    tests = []\n    operations = '+-*/'\n    for operation in operations:\n        for j in range(3):\n            cn1 = (randint(-max_modulo, max_modulo))\n            cn2 = (randint(-max_modulo, max_modulo))\n            tests.append(operation+' '+str(cn1)+' '+str(cn2)+'\\n')\n    return tests\n\ndef solve(dataset):\n    dataset = dataset.strip().split()\n    operation = dataset[0]\n    cn1 = int(dataset[1])\n    cn2 = int(dataset[2])\n    if operation == '+':\n        res_str = '{:.2f}'.format(cn1+cn2)\n    elif operation == '-':\n        res_str = '{:.2f}'.format(cn1-cn2)\n    elif operation == '*':\n        res_str = '{:.2f}'.format(cn1*cn2)\n    elif operation == '/':\n        if cn2!=0:\n            res_str = '{:.2f}'.format(cn1/cn2)\n        else:\n            res_str=('\u041d\u0430 \u043d\u043e\u043b\u044c \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f!') \n    return(str(res_str))   \n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 2, "templates_data": "::c\n#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["/ 5 0", "\u041d\u0430 \u043d\u043e\u043b\u044c \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f!"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/556524/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "556524", "time": "2018-12-19T13:35:21.504539"}