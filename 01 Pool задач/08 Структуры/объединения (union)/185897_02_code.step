{"block": {"name": "code", "text": "\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0437\u0430\u0434\u0430\u043d\u044b \u043c\u0435\u0441\u044f\u0446 \u0438 \u0433\u043e\u0434 \u0434\u0432\u0443\u0445 \u0434\u0430\u0442. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043b\u0438 \u0442\u0440\u0435\u0442\u044c\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0439 \u0434\u0430\u0442\u044b \u0434\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u0434\u0430\u0447\u0443 \u0440\u0435\u0448\u0438\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445.\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nstruct data {\n    int year;\n    int month;\n};\n\nmain() {\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["1995 2 2018 11\n2018 11", "\u0414\u0430"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\n\nmax_modulo = 12\n\ndef generate():\n    tests = []\n    for i in range(20):\n        vals = '{} {} {} {}\\n{} {}\\n'.format(str(randint(1600, 1800)), str(randint(1, max_modulo)), str(randint(1800, 2018)), str(randint(1, max_modulo)), str(randint(1500, 2018)), str(randint(1, max_modulo)))\n        tests.append(vals)\n    return tests\n\n\ndef solve(dataset):\n    dataset = dataset.strip().split()\n    d1 = {'year': int(dataset[0]), 'month': int(dataset[1])}\n    d2 = {'year': int(dataset[2]), 'month': int(dataset[3])}\n    du = {'year': int(dataset[4]), 'month': int(dataset[5])}\n    if d1['year'] < du['year'] < d2['year']:\n        return('\u0414\u0430')\n    elif du['year'] == d1['year']:\n        if du['month'] >= d1['month']:\n            return('\u0414\u0430')\n        else:\n            return('\u041d\u0435\u0442')\n    elif du['year'] == d2['year']:\n        if du['month'] <= d2['month']:\n            return('\u0414\u0430')\n        else:\n            return('\u041d\u0435\u0442')\n    else:\n        return('\u041d\u0435\u0442')\n    \n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n#include <stdio.h>\n \nstruct data {\n    int year;\n    int month;\n};\n \nmain() {\n    //put your code\n    return 0;\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["1995 2 2018 11\n2018 11", "\u0414\u0430"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/564807/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "564807", "time": "2018-12-19T13:35:27.142398"}