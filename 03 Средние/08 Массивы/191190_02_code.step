{"block": {"name": "code", "text": "\n\n\u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0432\u044b\u043c \u0438 \u0432\u0442\u043e\u0440\u044b\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043c\u0435\u0436\u0434\u0443 \u043d\u0443\u043b\u044f\u043c\u0438 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442.\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main()\n{\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["6\n1 0 2 3 0 4\n", "6"], ["10\n10 0 -3 -6 5 -5 6 0 -7 7", "-2700"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\nfrom operator import mul\nfrom functools import reduce\n\ndef generate():\n    test_cases = []\n    for i in range(20):\n        lst = [randint(-5, 5) for i in range(randint(20,40))]\n        lst = list(filter(lambda a: a != 0, lst))\n        ind1 = randint(0, len(lst)-1)\n        lst.insert(ind1, 0)\n        ind2 = randint(0, len(lst)-1)\n        while(abs(ind2 - ind1) < 2 or abs(ind2 - ind1) >8  ):\n            ind2 = randint(0, len(lst)-1)\n        lst.insert(ind2, 0)\n        test_cases.append(str(len(lst))+'\\n'+' '.join(map(str,lst))+'\\n')\n    return test_cases\n\n\ndef check(reply, clue):\n    return int(reply.strip()) == int(clue.strip())\n\ndef solve(dataset):\n    dataset = [int(n) for n in dataset.strip().splitlines()[1].split()]\n    zeros = [i for i,x in enumerate(dataset) if x==0]\n    return str(reduce(mul, dataset[zeros[0]+1:zeros[1]], 1))", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 2, "templates_data": "::c\n#include <stdio.h>\n\nint main()\n{\n    //put your code\n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["6\n1 0 2 3 0 4\n", "6"], ["10\n10 0 -3 -6 5 -5 6 0 -7 7", "-2700\n"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/543685/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543685", "time": "2018-12-19T13:36:03.441523"}