{"block": {"name": "code", "text": "\n\n<p><b>\u0428\u0438\u0444\u0440 \u0426\u0435\u0437\u0430\u0440\u044f.</b></p><p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>char cesar(char ch, int k)</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0435\u0439 \u0441\u0438\u043c\u0432\u043e\u043b ch \u043f\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0443 \u0426\u0435\u0437\u0430\u0440\u044f \u0441 \u043a\u043b\u044e\u0447\u043e\u043c k.</p><p>\u0428\u0438\u0444\u0440 \u0426\u0435\u0437\u0430\u0440\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0437\u0430\u043c\u0435\u043d\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043d\u0430 \u0442\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0435 \u043d\u0430 k \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u043f\u0440\u0430\u0432\u0435\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0431\u0443\u043a\u0432\u0430 a \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 2 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u0430 \u043d\u0430 \u0431\u0443\u043a\u0432\u0443 c, \u0431\u0443\u043a\u0432\u0430 x \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 4 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u0430 \u043d\u0430 \u0431\u0443\u043a\u0432\u0443 b, \u0442.\u043a. \u043c\u044b \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442 \u0437\u0430\u0446\u0438\u043a\u043b\u0435\u043d\u043d\u044b\u043c.\n</p>\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "char char_cesar(char ch, int k){\n    // put your code\n}"}, "code_templates_options": {}, "samples": [["a 2\n", "c\n"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <string.h>\n::code\nchar char_cesar(char ch, int k){\n    // put your code\n}\n::footer \nint main(void)\n{\n    int k;\n    char ch;\n    scanf(\"%c %d\", &ch, &k);\n    printf(\"%c\\n\", char_cesar(ch, k));\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["a 2\n", "c\n"], ["s 5\n", "x\n"], ["x 4\n", "b\n"], ["a 27\n", "b\n"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/548421/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "548421", "time": "2018-12-19T13:36:00.278961"}