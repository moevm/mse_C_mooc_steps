{"block": {"name": "code", "text": "\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e( <code class=\"cpp\">void addToBegin(Elem **head, int value)</code> ) \u0438 \u043a\u043e\u043d\u0435\u0446( <code class=\"cpp\">void addToEnd(Elem **head, int value)</code> ) \u0441\u043f\u0438\u0441\u043a\u0430. \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0433\u043e\u043b\u043e\u0432\u0443(\u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442) \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0443\u0437\u043b\u0430 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0438 \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u0448\u0430\u0433\u0435\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "void addToEnd(Elem **head, int value){\n    //put your code\n}\n\nvoid addToBegin(Elem **head, int value){\n    //put your code\n}"}, "code_templates_options": {}, "samples": [], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 0, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct ElementOfLinearList\n{\n\tint value;\n\tstruct ElementOfLinearList *next;\n}Elem;\n\nElem *init(int value);\nint count(Elem *head);\nvoid printList(Elem *head);\nvoid clear(Elem **head);\n::code\n        \nvoid addToEnd(Elem **head, int value){\n    //put your code\n}\n\nvoid addToBegin(Elem **head, int value){\n    //put your code\n}\n\n::footer\nint main(){\n    Elem *head = init(0);\n    printf(\"%d\\n\", count(head));\n    addToEnd(&head, 1);\n    addToEnd(&head, 2);\n    addToEnd(&head, 3);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    clear(&head);\n    addToEnd(&head, 4);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    addToBegin(&head, 3);\n    addToBegin(&head, 2);\n    addToBegin(&head, 1);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    clear(&head);\n    addToBegin(&head, 1);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n\treturn 0;\n}\n\nElem *init(int value){\n\tElem *head = (Elem *)malloc(sizeof(Elem));\n\thead->value = value;\n\thead->next = NULL;\n\treturn head;\n}\n\nvoid printList(Elem *head) {\n\tElem *tmp = head;\n\twhile(tmp){\n\t\tif (tmp->next)\n\t\t\tprintf(\"%d \", tmp->value);\n\t\telse\n\t\t\tprintf(\"%d\\n\", tmp->value);\n\t\ttmp = tmp->next;\n\t}\n}\n\nint count(Elem *head) {\n\tint counter = 0;\n\tElem *tmp = head;\n\twhile(tmp){\n\t\tcounter++;\n\t\ttmp = tmp->next;\n\t}\n\treturn counter;\n}\n\nvoid clear(Elem **head) {\n\tElem *next;\n\twhile(*head){\n\t\tnext = (*head)->next;\n\t\tfree(*head);\n\t\t(*head) = next;\n\t}\n\t*head = NULL;\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["", "1\n0 1 2 3\n4\n4\n1\n1 2 3 4\n4\n1\n1\n"]], "are_all_tests_scored": false}, "subtitles": {}, "tests_archive": "/api/step-sources/543654/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543654", "time": "2018-12-19T13:36:14.359647"}