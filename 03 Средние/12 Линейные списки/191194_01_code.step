{"block": {"name": "code", "text": "\n\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u0437\u043b\u043e\u043c \u043e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.<pre><code class=\"cpp\">typedef struct ElementOfLinearList<br>{<br>\u00a0 int value;<br>\u00a0 struct ElementOfLinearList *next;<br>}Elem;</code></pre>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code class=\"cpp\">int count(Elem *head)</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0437\u043b\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435.\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "int count(Elem *head) {\n\t//put your code\n}"}, "code_templates_options": {}, "samples": [], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 0, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct ElementOfLinearList\n{\n\tint value;\n\tstruct ElementOfLinearList *next;\n}Elem;\n\nElem *init(int value);\nvoid clear(Elem **head);\nvoid addToEnd(Elem **head, int value);\nvoid deleteFromEnd(Elem **head);\nvoid printList(Elem *head);\n::code\n\nint count(Elem *head) {\n\t//put your code\n}\n\n::footer\nint main(){\n    Elem *head = init(0);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    addToEnd(&head, 1);\n    addToEnd(&head, 2);\n    addToEnd(&head, 3);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    deleteFromEnd(&head);\n    printList(head);\n    printf(\"%d\\n\", count(head));\n    clear(&head);\n    printf(\"%d\\n\", count(NULL));\n\treturn 0;\n}\n\nElem *init(int value){\n\tElem *head = (Elem *)malloc(sizeof(Elem));\n\thead->value = value;\n\thead->next = NULL;\n\treturn head;\n}\n\nvoid clear(Elem **head) {\n\tElem *next;\n\twhile(*head){\n\t\tnext = (*head)->next;\n\t\tfree(*head);\n\t\t*head = next;\n\t}\n\t*head = NULL;\n}\n\nvoid addToEnd(Elem **head, int value){ //\u0442\u0435\u0441\u0442 \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a\n\tif(*head) {\n\t\tElem *tmp = *head;\n\t\twhile(tmp->next)\n\t\t\ttmp = tmp->next;\n\t\ttmp->next = init(value);\n\t\treturn;\n\t}\n\t*head = init(value);\n}\n\nvoid deleteFromEnd(Elem **head){\n\tif(head && *head){\n\t\tElem *tmp = *head;\n\t\tif(tmp->next){\n\t\t\twhile(tmp->next->next)\n\t\t\t\ttmp = tmp->next;\n\t\t\tElem *elem_for_remove = tmp->next;\n\t\t\ttmp->next = NULL;\n\t\t\tfree(elem_for_remove);\n\t\t}\n\t\telse{\n\t\t\tElem *tmp = *head;\n\t\t\t*head = NULL;\n\t\t\tfree(tmp);\n\t\t}\n\t}\n}\n\nvoid printList(Elem *head) {\n\tElem *tmp = head;\n\twhile(tmp){\n        if(tmp->next)\n\t\t    printf(\"%d \", tmp->value);\n        else\n            printf(\"%d\\n\", tmp->value);\n\t\ttmp = tmp->next;\n\t}\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["", "0\n1\n0 1 2 3\n4\n0 1 2\n3\n0\n"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/543653/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543653", "time": "2018-12-19T13:36:13.401898"}