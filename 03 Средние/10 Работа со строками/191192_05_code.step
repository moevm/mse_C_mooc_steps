{"block": {"name": "code", "text": "\n\n<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043f\u0435\u0440\u0432\u0443\u044e, \u0438 NULL, \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430. \n\n\u041f\u0430\u043c\u044f\u0442\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a \u0431\u044b\u043b\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438.</p><div>\n\n\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 &lt;stdio.h&gt;, &lt;stdlib.h&gt;, &lt;string.h&gt; \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e.</div>\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "char *my_strstr(char * str1, const char * str2) {\n\t// put your code\n}"}, "code_templates_options": {}, "samples": [], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import choices, randint\nfrom string import ascii_letters, digits\n\n\ndef generate():\n    test_cases = []\n    #correct tests\n    for i in range(5):\n        m_str = ''.join(choices(ascii_letters, k=randint(30, 50)))\n        borders = [randint(0,len(m_str)), randint(0,len(m_str))]\n        borders.sort()\n        test_cases.append(m_str*2 + '\\n' + m_str[borders[0]:borders[1]] + '\\n')\n    # string = substring*2\n    m_str = ''.join(choices(ascii_letters, k=randint(10, 20)))\n    test_cases.append(''.join(choices(ascii_letters, k=randint(10, 20))) + m_str*2 + '\\n' + m_str + '\\n')\n    # string = substring\n    m_str = ''.join(choices(ascii_letters, k=randint(30, 50)))\n    test_cases.append(m_str + '\\n' + m_str + '\\n')\n    # len(substr) == 0\n    m_str = ''.join(choices(ascii_letters, k=randint(30, 50)))\n    test_cases.append(m_str + '\\n\\n')\n    # len(substr) < len(str), substr not in str\n    for i in range(5):\n        m_str = ''.join(choices(ascii_letters, k=randint(30, 50)))\n        substr = ''.join(choices(ascii_letters, k=randint(10, 29)))\n        while substr in m_str:\n            substr = ''.join(choices(ascii_letters, k=randint(10, 29)))\n        test_cases.append(m_str + '\\n' + substr + '\\n')\n    # len(substr) > len(str)\n    test_cases.append(''.join(choices(ascii_letters, k=randint(10, 19))) + '\\n'\n        + ''.join(choices(ascii_letters, k=randint(20, 30))) + '\\n')\n    return test_cases\n\n\ndef solve(dataset):\n    parsed = dataset.strip().splitlines()\n    if len(parsed) > 1:\n        return str(parsed[0].find(parsed[1]))\n    return '0'\n\n\ndef check(reply, clue):\n    return int(reply.strip()) == int(clue.strip())", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 0, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n::code\nchar *my_strstr(char * str1, const char * str2) {\n\t// put your code\n}\n::footer\nint main() {\n\tchar *str1 = (char *)malloc(201 * sizeof(char));\n\tchar *str2 = (char *)malloc(21 * sizeof(char));\n\tfgets(str1, 201, stdin);\n\tfgets(str2, 21, stdin);\n\tstr1[strlen(str1) - 1] = '\\0';\n\tstr2[strlen(str2) - 1] = '\\0';\n\tchar *finded = my_strstr(str1, str2);\n\tif (finded)\n\t\tprintf(\"%d\\n\", (int)(finded - str1));\n\telse\n\t\tprintf(\"-1\\n\");\n\tfree(str1);\n\tfree(str2);\n\treturn 0;\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": []}, "subtitles": {}, "tests_archive": "/api/step-sources/543670/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543670", "time": "2018-12-19T13:36:08.293346"}