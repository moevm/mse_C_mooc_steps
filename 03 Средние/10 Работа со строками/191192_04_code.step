{"block": {"name": "code", "text": "\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u0438 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a. \u041f\u0430\u043c\u044f\u0442\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a \u0431\u044b\u043b\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438.<div>\n\n\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 &lt;stdio.h&gt;, &lt;stdlib.h&gt;, &lt;string.h&gt; \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e.</div>\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "char *my_strcat(char *destptr, const char *srcptr){\n\t// put your code\n}"}, "code_templates_options": {}, "samples": [], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import choices, randint\nfrom string import ascii_letters, digits\n\n\ndef generate():\n    test_cases = []\n    for i in range(20):\n        test_cases.append(''.join(choices(ascii_letters + digits, k=randint(10, 20)))+'\\n' +\n                          ''.join(choices(ascii_letters + digits, k=randint(10, 20)))+'\\n')\n    test_cases.append('\\n\\n')\n    test_cases.append(str(choices(ascii_letters + digits)[0])+'\\n\\n')\n    return test_cases\n\n\ndef solve(dataset):\n    return dataset.replace('\\n','')\n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 0, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n::code\nchar *my_strcat(char *destptr, const char *srcptr){\n\t// put your code\n}\n::footer\nint main() {\n\tchar *str1 = (char *)malloc(201*sizeof(char));\n\tchar *str2 = (char *)malloc(201*sizeof(char));\n\tfgets(str1, 201, stdin);\n\tfgets(str2, 201, stdin);\n\tstr1[strlen(str1)-1]= '\\0';\n    str2[strlen(str2)-1]= '\\0';\n    str1 = my_strcat(str1, str2);\n\tprintf(\"%s\", str1);\n\tfree(str1);\n\tfree(str2);\n\treturn 0;\n}\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": []}, "subtitles": {}, "tests_archive": "/api/step-sources/543669/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543669", "time": "2018-12-19T13:36:08.028241"}