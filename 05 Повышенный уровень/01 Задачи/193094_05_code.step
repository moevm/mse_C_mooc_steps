{"block": {"name": "code", "text": "<p>\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u0438\u043d\u043d\u0443\u044e \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u043a\u0443.<br>\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438('*'/'/'), \u043f\u043e\u0442\u043e\u043c \u0434\u0432\u0443\u0445 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 10-30 \u043f\u043e\u0440\u044f\u0434\u043a\u0430\n\n(\u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438, \u0442\u0430\u043a \u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438).\n\n. \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445<br>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 0 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442<br></p>", "video": null, "animation": null, "options": {"execution_time_limit": 10, "execution_memory_limit": 256, "limits": {"c": {"time": 10, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["*\n32569557161\n5743851622229\n", "187074703734489993731869"], ["/\n359001952583673845882868\n6824931411\n", "52601547321788"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import choices, randint\nfrom string import digits\n\ndef generate():\n    test_cases = []\n    factor1, factor2 = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('*\\n'+str(factor1)+'\\n'+str(factor2)+'\\n', str(factor2*factor1)))\n    divider, result = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('/\\n'+str(divider*result)+'\\n'+str(divider)+'\\n', str(result)))\n\n    factor1, factor2 = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('*\\n'+str(factor1)+'\\n-'+str(factor2)+'\\n', str()))\n    factor1, factor2 = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('*\\n-'+str(factor1)+'\\n'+str(factor2)+'\\n', str()))\n    factor1, factor2 = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('*\\n-'+str(factor1)+'\\n-'+str(factor2)+'\\n', str()))\n\n    divider, result = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('/\\n-'+str(divider*result)+'\\n'+str(divider)+'\\n', str(-result)))\n    divider, result = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('/\\n'+str(divider*result)+'\\n'+str(-divider)+'\\n', str(-result)))\n    divider, result = int(''.join(choices(digits, k=randint(10, 15)))), int(''.join(choices(digits, k=randint(10, 15))))\n    test_cases.append(('/\\n'+str(-divider*result)+'\\n'+str(-divider)+'\\n', str(result)))\n\n    test_cases.append(('*\\n0\\n'+str(int(''.join(choices(digits, k=randint(10, 15)))))+'\\n', '0'))\n    test_cases.append(('*\\n-'+str(int(''.join(choices(digits, k=randint(10, 15)))))+'\\n0\\n', '0'))\n    factor = str(int(''.join(choices(digits, k=randint(10, 15)))))\n    test_cases.append(('*\\n'+factor+'\\n1\\n', factor))\n    dividend = str(int(''.join(choices(digits, k=randint(20, 30)))))\n    test_cases.append(('/\\n'+dividend+'\\n1\\n', dividend))\n    dividend = str(int(''.join(choices(digits, k=randint(20, 30)))))\n    test_cases.append(('/\\n'+dividend+'\\n-1\\n', '-'+dividend))\n    test_cases.append(('/\\n0\\n'+str(int(''.join(choices(digits, k=randint(10, 15)))))+'\\n', '0'))\n\n    return test_cases\n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 10, "execution_memory_limit": 256, "samples_count": 2, "templates_data": "::c\n#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [], "are_all_tests_scored": false}, "subtitles": {}, "tests_archive": "/api/step-sources/554432/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "554432", "time": "2018-12-19T13:36:28.837275"}