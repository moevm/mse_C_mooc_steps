{"block": {"name": "code", "text": "\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0435\u0433\u043e \u043e\u0431\u0445\u043e\u0434\u0430.<br>\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0437\u043b\u043e\u0432, \u0430 \u0437\u0430\u0442\u0435\u043c n \u0447\u0438\u0441\u0435\u043b. <div>\u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f: </div><div><ol><li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u0440\u043d\u044f \u043f\u0435\u0440\u0432\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c. </li><li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430:<br><ol><li>\u0422\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u043e\u0439 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043e\u0440\u0435\u043d\u044c.</li><li>\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435(N) \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u0435(C). \u0415\u0441\u043b\u0438:<ol><li>N &gt; C.\u00a0\n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043c\u043e\u043a?<ol><li>true. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u043e\u0439 \u043f\u0440\u0430\u0432\u044b\u0439 \u0443\u0437\u0435\u043b.\u00a0\n\n\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a 2.2\n\n</li><li>false. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043c\u043a\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c N. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u043e. \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a 2.1</li></ol></li><li>N &lt; C. \n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0435\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043c\u043e\u043a?<ol><li>true. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u043e\u0439 \u043b\u0435\u0432\u044b\u0439 \u0443\u0437\u0435\u043b. \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a 2.2\n\n</li><li>false. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043b\u0435\u0432\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043c\u043a\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c N. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u043e. \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a 2.1\n\n</li></ol></li></ol></li></ol></li></ol>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0431\u0445\u043e\u0434\u0430 \u0434\u0435\u0440\u0435\u0432\u0430 \u0442\u0440\u0435\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 -\u00a0\n\n\u041a\u041b\u041f, \u041b\u041a\u041f, \u041b\u041f\u041a.</div><div>P.S. \u041a - \u043a\u043e\u0440\u0435\u043d\u044c, \u041b - \u043b\u0435\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043c\u043e\u043a, \u041f - \u043f\u0440\u0430\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043c\u043e\u043a.</div>", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "typedef struct TreeNode\n{\n    int value;\n    struct TreeNode *left;\n    struct TreeNode *right;   \n}TreeNode;\n\nint main() {\n    // put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["7\n4 6 5 7 2 3 1\n", "4 2 1 3 6 5 7\n1 2 3 4 5 6 7\n1 3 2 5 7 6 4"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from numpy.random import randint as npr\nfrom random import randint\n\nclass Node:\n    def __init__(self, value):\n        self.left = None\n        self.right = None\n        self.value = value\n\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = Node(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = Node(value)\n            else:\n                self.right.insert(value)\n\n    def RootLR(self, res_lst):\n        res_lst.append(self.value)\n        if self.left:\n            self.left.RootLR(res_lst)\n        if self.right:\n            self.right.RootLR(res_lst)\n\n    def LRootR(self, res_lst):\n        if self.left:\n            self.left.LRootR(res_lst)\n        res_lst.append(self.value)\n        if self.right:\n            self.right.LRootR(res_lst)\n\n    def LRRoot(self, res_lst):\n        if self.left:\n            self.left.LRRoot(res_lst)\n        if self.right:\n            self.right.LRRoot(res_lst)\n        res_lst.append(self.value)\n\n\ndef generate():\n    cases = []\n    for i in range(15):\n        case = list(set(npr(-100, 100, randint(5,32))))\n        cases.append(str(len(case)) + '\\n' + ' '.join(list(map(str, case))) + '\\n')\n    return cases\n\ndef solve(dataset):\n    dataset = list(map(int, dataset.strip().splitlines()[1].split()))\n    res_str = []\n    root = Node(dataset[0])\n    for i in range(1,len(dataset)):\n        root.insert(dataset[i])\n    res_lst = []\n    root.RootLR(res_lst)\n    res_str.append(' '.join(list(map(str, res_lst))))\n    res_lst = []\n    root.LRootR(res_lst)\n    res_str.append(' '.join(list(map(str, res_lst))))\n    res_lst = []\n    root.LRRoot(res_lst)\n    res_str.append(' '.join(list(map(str, res_lst))))\n    return '\\n'.join(res_str) \n    \n\ndef check(reply, clue):\n    reply = [lst.split() for lst in reply.strip().splitlines()]\n    clue = [lst.split() for lst in clue.strip().splitlines()]\n    if len(reply) != len(clue):\n        return False, \"\u041d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043e\u0431\u0445\u043e\u0434\u043e\u0432\"\n    if reply[0] != clue[0]:\n        return False, \"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0445\u043e\u0434\u0430 \u043a\u043b\u043f\"\n    if reply[1] != clue[1]:\n        return False, \"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0445\u043e\u0434\u0430 \u043b\u043a\u043f\"\n    if reply[2] != clue[2]:\n        return False, \"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0445\u043e\u0434\u0430 \u043b\u043f\u043a\"\n    return True", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n\ntypedef struct TreeNode\n{\n    int value;\n    struct TreeNode *left;\n    struct TreeNode *right;   \n}TreeNode;\n\nint main() {\n    // put your code\n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["7\n4 6 5 7 2 3 1\n", "4 2 1 3 6 5 7 \n1 2 3 4 5 6 7 \n1 3 2 5 7 6 4 \n"], ["11\n10 0 9 1 8 2 7 3 6 4 5\n", "10 0 9 1 8 2 7 3 6 4 5\n0 1 2 3 4 5 6 7 8 9 10\n5 4 6 3 7 2 8 1 9 0 10\n"], ["11\n10 9 8 7 6 5 4 3 2 1 0\n", "10 9 8 7 6 5 4 3 2 1 0\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n"]], "are_all_tests_scored": false}, "subtitles": {}, "tests_archive": "/api/step-sources/549127/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "549127", "time": "2018-12-19T13:36:27.755369"}