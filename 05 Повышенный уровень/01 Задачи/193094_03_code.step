{"block": {"name": "code", "text": "<p>Write a program that converts a <b>postfix</b> statement to an <b>infix</b><b></b> statement:</p><p>Consider <b>numbers</b> or <b>alphabets</b> as the operands and <b>+</b>, <b>-</b>, <b>/</b> and <b>*</b> as the operator.</p><p><b>Note:</b> There should be a <b>space</b> in between each Input. For example: <b>1 + a * 4</b> is a correct expression while <b>1+ 2*3</b> is a wrong input.</p>", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["A B +", "A + B"], ["1 16 * 28 7 / +", "1 * 16 + 28 / 7"], ["f 0 / c / 6 S / + 1 p * + 3 W * 9 * e / + 6 d * 1 * X / 1 / E / + 1 z / + 3 + 1 -", "f / 0 / c + 6 / S + 1 * p + 3 * W * 9 / e + 6 * d * 1 / X / 1 / E + 1 / z + 3 - 1"], ["s 8 * h - 4 - c 9 * - g + 4 - S 3 / - i - 9 e * 1 / L * 0 * + f - 8 + S 6 / 6 / +", "s * 8 - h - 4 - c * 9 + g - 4 - S / 3 - i + 9 * e / 1 * L * 0 - f + 8 + S / 6 / 6"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "import random\nimport string\n\n\nclass myStack:\n    def __init__(self):\n        self.container = []  # You don't want to assign [] to self - when you do that, you're just assigning to a new local variable called `self`.  You want your stack to *have* a list, not *be* a list.\n\n    def isEmpty(self):\n        return self.size() == 0  # While there's nothing wrong with self.container == [], there is a builtin function for that purpose, so we may as well use it.  And while we're at it, it's often nice to use your own internal functions, so behavior is more consistent.\n\n    def push(self, item):\n        self.container.append(item)  # appending to the *container*, not the instance itself.\n\n    def pop(self):\n        return self.container.pop()  # pop from the container, this was fixed from the old version which was wrong\n\n    def peek(self):\n        if self.isEmpty():\n            raise Exception(\"Stack empty!\")\n        return self.container[len(self.container) - 1]  # View element at top of the stack\n\n    def size(self):\n        return len(self.container)  # length of the container\n\n    def show(self):\n        return self.container  # display the entire stack as list\n\n\ndef infixToPostfix(infixexpr):\n    prec = {\"*\": 3, \"/\": 3, \"+\": 2, \"-\": 2, \"(\": 1}\n    opStack = myStack()\n    postfixList = []\n    tokenList = infixexpr.split()\n\n    for token in tokenList:\n        if token.isdigit() or token.isalpha():\n            postfixList.append(token)\n        elif token == '(':\n            opStack.push(token)\n        elif token == ')':\n            topToken = opStack.pop()\n            while topToken != '(':\n                postfixList.append(topToken)\n                topToken = opStack.pop()\n        else:\n            while (not opStack.isEmpty()) and (prec[opStack.peek()] >= prec[token]):\n                postfixList.append(opStack.pop())\n            opStack.push(token)\n\n    while not opStack.isEmpty():\n        postfixList.append(opStack.pop())\n    return \" \".join(postfixList)\ndef postfixEval(postfixExpr):\n    operandStack = myStack()\n    tokenList = postfixExpr.split()\n    infit = ''\n\n    for token in tokenList:\n        if token.isdigit() or token.isalpha():\n            operandStack.push(token)\n        else:\n            operand2 = operandStack.pop()\n            operand1 = operandStack.pop()\n            result = doMath(token, operand1, operand2)\n            operandStack.push(result)\n    return operandStack.pop()\n\n\ndef doMath(op, op1, op2):\n    result = op1\n    result += ' '\n    result += op\n    result += ' '\n    result += op2\n    return result\n\ndef generate():\n    test = []\n    signs = '+*/-'\n    test_case = []\n    for i in range(5):\n        a = ''\n        for j in range(10):\n            a += random.choice(string.ascii_letters)\n            a += signs[random.randint(0, 3)]\n            a += random.choice(string.digits)\n            a += signs[random.randint(0, 3)]\n        b = ''\n        for y in a:\n            b += y\n            b += ' '\n        b += random.choice(string.digits)\n        test_case.append(infixToPostfix(b))\n    return test_case\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n\ndef solve(dataset):\n    return postfixEval(dataset)", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 4, "templates_data": "::c\n\n#include <stdio.h>\n\nint main(){\n\n    return 0;\n}\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["A B +", "A + B"], ["1 16 * 28 7 / +", "1 * 16 + 28 / 7"]], "are_all_tests_scored": false}, "subtitles": {}, "tests_archive": "/api/step-sources/550154/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "550154", "time": "2018-12-19T13:36:28.271843"}