{"block": {"name": "admin", "text": "<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0412 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0445 \u0431\u0443\u043a\u0432, \u0437\u0430\u0442\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u0435\u043b \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439, \u0434\u0430\u043b\u0435\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 [10^20, 10^25]. \u0411\u0443\u043a\u0432\u044b \u043d\u0430\u0434\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 -\u00a0 \u0441\u043b\u043e\u0436\u0438\u0442\u044c, \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 2. \u041f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u043e\u043c \u0436\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0447\u0442\u043e \u0438 \u0431\u044b\u043b\u0438 \u0441\u0447\u0438\u0442\u0430\u043d\u044b. \u0427\u0438\u0441\u043b\u043e \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043e \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0431\u0443\u043a\u0432\u0430 \u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0424\u0430\u0439\u043b \u0441 \u043a\u043e\u0434\u043e\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 '/home/box/' \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f 'read_args.c'</p>", "video": null, "animation": null, "options": {"time_limit": 3600}, "subtitle_files": [], "source": {"image_id": 3, "memory": 64, "is_bootstrap": false, "bootstrap_script": "# Use this script to configure a virtual machine for this challenge.\n# It is run for every machine created prior to assigning it to a user.\n# A machine is considered as configured and can be assigned to a user\n# only if this script exits with a zero status.\n# The execution time is limited to 3 minutes.\nset -e  # Exit immediately if any command exits with a non-zero status.\n\n# Type your Bash commands here...\n# ...", "test_scenario": "def test_connection(s):\n    assert s.run('true').succeeded, \"Could not connect to server\"\n\n\ndef test_file_exist(s):\n    assert s.run('test -f /home/box/read_args.c').succeeded, \"C file not found\"\n    \ndef test_compile(s):\n    assert s.run('gcc /home/box/read_args.c -std=c99 -o /home/box/action').succeeded, \"Compile failed\"\n    \nfrom random import randint, choice\nfrom string import ascii_lowercase\n    \ndef test_first_result(s):\n    letters, nums, long_num = [choice(ascii_lowercase) for i in range(randint(2, 5))], [str(randint(-10, 10)/10) for i in range(randint(2,5))], str(randint(10**20, 10**25))\n    reply = s.run('/home/box/action {}'.format(' '.join(letters + nums + [long_num])))\n    reply = [result.strip() for result in reply.strip().splitlines()]\n    clue = [''.join(letters), str(sum([float(number) for number in nums])), str(int(long_num)*2)]\n    check_res = my_check(reply, clue)\n    assert check_res[0], check_res[1]\n    \ndef test_second_result(s):\n    letters, nums, long_num = [choice(ascii_lowercase)], [str(randint(-10, 10)/10) for i in range(randint(2,5))], str(randint(10**20, 10**25))\n    reply = s.run('/home/box/action {}'.format(' '.join(letters + nums + [long_num])))\n    reply = [result.strip() for result in reply.strip().splitlines()]\n    clue = [''.join(letters), str(sum([float(number) for number in nums])), str(int(long_num)*2)]\n    check_res = my_check(reply, clue)\n    assert check_res[0], check_res[1]\n\n    \ndef test_third_result(s):\n    letters, nums, long_num = [choice(ascii_lowercase) for i in range(randint(2, 5))], [str(randint(-10, 10)/10)], str(randint(10**20, 10**25))\n    reply = s.run('/home/box/action {}'.format(' '.join(letters + nums + [long_num])))\n    reply = [result.strip() for result in reply.strip().splitlines()]\n    clue = [''.join(letters), str(sum([float(number) for number in nums])), str(int(long_num)*2)]\n    check_res = my_check(reply, clue)\n    assert check_res[0], check_res[1]\n    \ndef test_third_result(s):\n    letters, nums, long_num = [choice(ascii_lowercase)], [str(randint(-10, 10)/10)], str(randint(10**25, 10**26-1))\n    reply = s.run('/home/box/action {}'.format(' '.join(letters + nums + [long_num])))\n    reply = [result.strip() for result in reply.strip().splitlines()]\n    clue = [''.join(letters), str(sum([float(number) for number in nums])), str(int(long_num)*2)]\n    check_res = my_check(reply, clue)\n    assert check_res[0], check_res[1]\n\ndef my_check(reply, clue):\n    if reply[0] != clue[0]:\n        return False, \"Incorrect result word\"\n    if float(reply[1]) != float(clue[1]):\n        return False, \"Incorrect sum of float numbers\"\n    return int(reply[2]) == int(clue[2]), \"Incorrect long mulpitply\"\n    "}, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "570736", "time": "2018-12-19T13:36:29.089958"}