{"block": {"name": "code", "text": "\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u044b \u0434\u0432\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0433\u043e \u0442\u0438\u043f\u0430. \u041d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043d\u0438\u0445 \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c. \u041d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c p1, \u0430 \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c p2. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445(\u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0442\u043e\u0440\u0443\u044e, \u043f\u043e\u0442\u043e\u043c \u043f\u0435\u0440\u0432\u0443\u044e), \u0430 \u0437\u0430\u0442\u0435\u043c \u0438\u0445 \u0441\u0443\u043c\u043c\u0443.\n\n\u0427\u0438\u0441\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.(\u0444\u0443\u043d\u043a\u0446\u0438\u044e main() \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e)\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": ""}, "code_templates_options": {}, "samples": [], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\n\nmax_modulo = 10000\n\ndef generate():\n    tests = []\n    for i in range(20):\n        vals = '{} {}\\n'.format(str(randint(-max_modulo, max_modulo)), str(randint(-max_modulo, max_modulo)))\n        tests.append(vals)\n    return tests\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\ndef solve(dataset):\n    vals = list(map(int, dataset.strip().split()))\n    return str(vals[1]) + ' ' + str(vals[0]) +' ' + str(vals[0]+vals[1])", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 0, "templates_data": "::c\n::header\n#include <stdio.h>\n\nint main(){\n    int n1, n2;\n    scanf(\"%d %d\", &n1, &n2);\n    int *p1 = &n1;\n    int *p2 = &n2;\n::footer\n    return 0;\n}\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": []}, "subtitles": {}, "tests_archive": "/api/step-sources/543677/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543677", "time": "2018-12-19T13:35:44.626909"}