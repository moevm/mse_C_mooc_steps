{"block": {"name": "code", "text": "\n\n\u041d\u0430\u0439\u0442\u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u043e\u043c \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0445 (\u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0445) \u0431\u0443\u043a\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435(\u0434\u043b\u0438\u043d\u0430 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). \n\n\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 &lt;stdio.h&gt;, &lt;string.h&gt; \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. (\u041d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0434\u043e)\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "int diff_lower_upper(char * str) {\n\t// put your code\n}"}, "code_templates_options": {}, "samples": [["lknPYznIRHovmbiNiJ\n", "4"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import choice, choices, randint, sample\nfrom string import ascii_lowercase, ascii_uppercase, ascii_letters\n\ndef generate():\n    cases = ['\\n', choice(ascii_lowercase)+'\\n', choice(ascii_uppercase)+'\\n']\n    for _ in range(5):\n        cases.append(''.join(choices(ascii_letters, k=randint(10,100))) + '\\n')\n    for _ in range(3):\n        k = randint(5,50)\n        str_ = ''.join(choices(ascii_lowercase, k=k) + choices(ascii_uppercase, k=k))\n        cases.append(''.join(sample(str_,len(str_))) + '\\n')\n    return cases\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\ndef solve(dataset):\n    return str(sum(1 for c in dataset if c.islower()) - sum(1 for c in dataset if c.isupper()))", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n::header\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n::code\nint diff_lower_upper(char * str) {\n\t// put your code\n}\n::footer\nint main() {\n\tchar *str = (char *)malloc(201 * sizeof(char));\n\tfgets(str, 201, stdin);\n\tstr[strlen(str) - 1] = '\\0';\n    printf(\"%d\\n\", diff_lower_upper(str));\n\tfree(str);\n\treturn 0;\n}\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["lknPYznIRHovmbiNiJ\n", "4\n"]], "are_all_tests_scored": false}, "subtitles": {}, "tests_archive": "/api/step-sources/543662/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "543662", "time": "2018-12-19T13:35:41.623486"}