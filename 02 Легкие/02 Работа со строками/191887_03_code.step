{"block": {"name": "code", "text": "\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0441\u043e\u0431\u043e\u0439 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e \u0438\u0437 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432(\u043d\u0435 \u0431\u043e\u043b\u0435\u0435 100). \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c (\u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e \u0447\u0438\u0442\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u0432 \u043e\u0431\u043e\u0438\u0445 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445 - \"anna\", \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \"Anna\" \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c). \u0412\u0435\u0440\u043d\u0443\u0442\u044c 1 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u0430, \u0438 0 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c. \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f strlen \u0438\u0437 &lt;string.h&gt;(\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0443\u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430)", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "int is_palindrome(char *str){\n    //put your code\n}"}, "code_templates_options": {}, "samples": [], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import choice, choices, randint\nfrom string import ascii_lowercase, ascii_letters, digits\n\ndef generate():\n\tcases = ['\\n']\n\tfor _ in range(4):\n\t    part = ''.join(choices(ascii_letters, k=randint(1,100)))\n\t    cases.append(part + ''.join(reversed(part))+'\\n')\n\tfor _ in range(5):\n\t    part = ''.join(choices(ascii_letters, k=randint(1,100)))\n\t    cases.append(part + choice(ascii_letters) + ''.join(reversed(part))+'\\n')\n\tfor _ in range(5):\n\t    cases.append(''.join(choices(ascii_letters, k=randint(1,100)))+'\\n')\n\tpart = ''.join(choices(ascii_lowercase, k=randint(1,100)))\n\tcases.append(part.capitalize() + choice(ascii_letters) + ''.join(reversed(part))+'\\n')\n\tcases.append(part + choice(ascii_letters) + ''.join(reversed(part.capitalize()))+'\\n')\n\tcases.append(part + choice(ascii_letters) + ''.join(reversed(part)).capitalize()+'\\n')\n\treturn cases\n\ndef check(reply, clue):\n    return int(reply.strip()) == int(clue.strip())\n\ndef solve(dataset):\n    dataset = dataset.strip()\n    return '1' if dataset == ''.join(reversed(dataset)) else '0'", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 0, "templates_data": "::c\n::header\n#include <stdio.h>\n::code\nint is_palindrome(char *str){\n    //put your code\n}\n::footer\nint main(){\n\tchar *str = (char *)malloc(202);\n\tfgets(str, 202, stdin);\n\tstr[strlen(str)-1] = '\\0';\n\tprintf(\"%d\", is_palindrome(str));\n\tfree(str);\n\treturn 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": []}, "subtitles": {}, "tests_archive": "/api/step-sources/547632/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "547632", "time": "2018-12-19T13:35:42.280626"}