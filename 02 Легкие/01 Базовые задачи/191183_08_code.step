{"block": {"name": "code", "text": "\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0438\u0441\u043b\u043e n, \u0430 \u043f\u043e\u0441\u043b\u0435 - n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b \u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u201cTrue\u201d \u0438\u043b\u0438 \u201cFalse\".\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main()\n{\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["5\n-2 -1 0 1 2\n", "True"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\n\ndef generate_list(start_min=0, start_max=0, rand=False):\n\tlst = []\n\tif not rand:\n\t\tstart = randint(start_min, start_max)\n\t\tfor i in range(randint(10,30)):\n\t\t\tstart += randint(1,10)\n\t\t\tlst.append(str(start))\n\telse:\n\t\tlst = [str(randint(-30,30)) for i in range(randint(10,30))] \n\t\twhile solve(str(len(lst)) + '\\n' + ' '.join(lst)) == 'True':\n\t\t\tlst = [str(randint(-30,30)) for i in range(randint(10,30))] \n\treturn lst\n\n\ndef generate():\n\ttest_cases = []\n\tfor i in range(3):\n\t\tlst = generate_list(-500, -400)\n\t\ttest_cases.append(str(len(lst)) + '\\n' + ' '.join(lst))\n\tfor i in range(3):\n\t\tlst = generate_list(-100, 100)\n\t\ttest_cases.append(str(len(lst)) + '\\n' + ' '.join(lst))\n\tlst = randint(1, 10);\n\tlst = [str(lst) for i in range(randint(10,20))]\n\ttest_cases.append(str(len(lst)) + '\\n' + ' '.join(lst))\n\ttest_cases.append('1' + '\\n' + str(randint(-10,10)))\n\tfor i in range(3):\n\t\tlst = generate_list(rand=True)\n\t\ttest_cases.append(str(len(lst)) + '\\n' + ' '.join(lst))\n\tlst = generate_list()\n\tlst.append(str(int(lst[-1])-1))\n\ttest_cases.append(str(len(lst)) + '\\n' + ' '.join(lst))\n\treturn test_cases\n\n\ndef solve(lst):\n    lst = [int(i) for i in lst.strip().splitlines()[1].split()]\n    for i in range(len(lst)-1):\n    \tif lst[i] > lst[i+1]:\n    \t\treturn str(False)\n    return str(True)\n\ndef check(reply, clue):\n\treturn reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n#include <stdio.h>\n\nint main()\n{\n    //put your code\n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["5\n-2 -1 0 1 2\n", "True\n"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/551308/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "551308", "time": "2018-12-19T13:35:40.715441"}