{"block": {"name": "code", "text": "\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 a \u0438 b, \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u0430 [a;b], \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 3. \u0418\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \"Error\". <i>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e \u0434\u0432\u0443\u0445 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.</i>\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["2 2", "Error"], ["59 -23\n", "18.00"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from random import randint\n\nmax_modulo = 100\n\ndef generate():\n    tests = []\n    for i in range(20):\n        vals = '{} {}\\n'.format(str(randint(-max_modulo, max_modulo)), str(randint(-max_modulo, max_modulo)))\n        tests.append(vals)\n    return tests\n\n\ndef solve(dataset):\n    dataset = dataset.strip().split()\n    s = 0\n    c = 0\n    if int(dataset[0])<int(dataset[1]):\n        for j in range (int(dataset[0]),int(dataset[1])):\n            if j%3 == 0:\n                s = s+j \n                c = c+1\n            j+=1\n        return (str(s/c))\n    elif int(dataset[1])<int(dataset[0]):\n        for j in range (int(dataset[1]),int(dataset[0])):\n            if j%3 == 0:\n                s = s+j \n                c = c+1\n            j+=1\n        return (str(format(s/c, '.2f')))\n    else:\n         return (\"Error\") \n        \n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 2, "templates_data": "::c\n#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}\n\n\n\n\n\n", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": [["2 2", "Error"]]}, "subtitles": {}, "tests_archive": "/api/step-sources/556438/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "556438", "time": "2018-12-19T13:35:52.516814"}