{"block": {"name": "code", "text": "\n\n\u041d\u0430\u0439\u0442\u0438 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 15 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b (\u0447\u0438\u0441\u043b\u0430 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043e\u043d\u0441\u043e\u043b\u0438).\n\n", "video": null, "animation": null, "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c": {"time": 5, "memory": 256}}, "code_templates": {"c": "#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}"}, "code_templates_options": {}, "samples": [["-85 61 -40 -99 -64 66 56 56 -2 -45 68 -49 -8 -77 -32\n", "68"]], "is_run_user_code_allowed": true}, "subtitle_files": [], "source": {"code": "from numpy.random import randint as npr\n\ndef generate():\n    cases = []\n    for i in range(10):\n        cases.append(' '.join(map(str, list(npr(-100, 100, 15)))) + '\\n')\n    cases.append(' '.join(map(str, list(npr(-100, -1, 15)))) + '\\n')\n    cases.append('1 2147483647 ' + ' '.join(map(str, list(npr(-100, 100, 13)))) + '\\n')\n    return cases\n\ndef solve(dataset):\n    return str(max(map(int, dataset.strip().split())))\n    \n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_time_limit": 5, "execution_memory_limit": 256, "samples_count": 1, "templates_data": "::c\n#include <stdio.h>\n\nint main(){\n    //put your code\n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "is_run_user_code_allowed": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "test_cases": []}, "subtitles": {}, "tests_archive": "/api/step-sources/561360/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "561360", "time": "2018-12-19T13:35:46.199546"}